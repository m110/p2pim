!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = gcc $(CFLAGS) $(LDFLAGS)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g -O3 -std=c11 -D_POSIX_SOURCE$/;"	m
CLIENT	Makefile	/^CLIENT = client$/;"	m
CLIENT_HEADERS	Makefile	/^CLIENT_HEADERS = p2pim.h structs_common.h net.h opcodes.h opcodes_client.h$/;"	m
CLIENT_OBJS	Makefile	/^CLIENT_OBJS = $(CLIENT).c p2pim.c structs_common.c net.c opcodes.c opcodes_client.c$/;"	m
CLI_CLOSE	opcodes.h	/^    CLI_CLOSE        =   0x002,$/;"	e	enum:opcode
CLI_HEARTBEAT	opcodes.h	/^    CLI_HEARTBEAT    =   0x001,$/;"	e	enum:opcode
CLI_LIST	opcodes.h	/^    CLI_LIST         =   0x003,$/;"	e	enum:opcode
CLI_REGISTER	opcodes.h	/^    CLI_REGISTER     =   0x000,$/;"	e	enum:opcode
ERROR_NOT_REGISTERED	opcodes.h	/^    ERROR_NOT_REGISTERED        =   0x002,$/;"	e	enum:opcode_status
ERROR_PEER_ID_EXISTS	opcodes.h	/^    ERROR_PEER_ID_EXISTS        =   0x003$/;"	e	enum:opcode_status
ERROR_UNKNOWN	opcodes.h	/^    ERROR_UNKNOWN               =   0x001,$/;"	e	enum:opcode_status
LDFLAGS	Makefile	/^LDFLAGS = -lpthread$/;"	m
MAX_MESSAGE_LEN	net.h	14;"	d
MAX_PACKET_SIZE	net.h	13;"	d
MAX_PEER_ID_LEN	structs_common.h	6;"	d
OPCODES_COUNT	opcodes.h	4;"	d
SERVER	Makefile	/^SERVER = server$/;"	m
SERVER_HEADERS	Makefile	/^SERVER_HEADERS = p2pim.h structs_common.h net.h structs_server.h opcodes.h opcodes_server.h$/;"	m
SERVER_OBJS	Makefile	/^SERVER_OBJS = $(SERVER).c p2pim.c structs_common.c net.c structs_server.c opcodes_server.c opcodes.c$/;"	m
SERVER_PORT	p2pim.h	13;"	d
SRV_INFO	opcodes.h	/^    SRV_INFO         =   0x004$/;"	e	enum:opcode
STATUS_SUCCESS	opcodes.h	/^    STATUS_SUCCESS              =   0x000,$/;"	e	enum:opcode_status
_NET_H	net.h	2;"	d
_OPCODES_CLIENT_H	opcodes_client.h	2;"	d
_OPCODES_H	opcodes.h	2;"	d
_OPCODES_SERVER_H	opcodes_server.h	2;"	d
_P2PIM_H	p2pim.h	2;"	d
_STRUCTS_COMMON_H	structs_common.h	2;"	d
_STRUCTS_SERVER_H	structs_server.h	2;"	d
add_node	structs_server.c	/^int add_node(struct node **head, struct peer *peer) {$/;"	f
address	structs_common.h	/^    char address[INET6_ADDRSTRLEN];$/;"	m	struct:net_location
create_peer	structs_common.c	/^struct peer create_peer(char *id, char *address, unsigned short port, struct sockaddr *sockaddr) {$/;"	f
current_time	p2pim.c	/^unsigned int current_time() {$/;"	f
delete_node	structs_server.c	/^int delete_node(struct node **head, struct node *node) {$/;"	f
free_node	structs_server.c	/^void free_node(struct node *node) {$/;"	f
get_address	net.c	/^void get_address(struct sockaddr *sa, char *address) {$/;"	f
get_node	structs_server.c	/^struct node* get_node(struct node *head, struct net_location *location) {$/;"	f
get_node_by_id	structs_server.c	/^struct node* get_node_by_id(struct node *head, char *peer_id) {$/;"	f
get_port	net.c	/^unsigned short get_port(struct sockaddr *sa) {$/;"	f
handle_close	opcodes_server.c	/^int handle_close(struct opcode_context *ctx) {$/;"	f
handle_heartbeat	opcodes_server.c	/^int handle_heartbeat(struct opcode_context *ctx) {$/;"	f
handle_info	opcodes_client.c	/^int handle_info(struct opcode_context *ctx) {$/;"	f
handle_list	opcodes_server.c	/^int handle_list(struct opcode_context *ctx) {$/;"	f
handle_opcode	opcodes.c	/^inline int handle_opcode(struct opcode_context *ctx) {$/;"	f
handle_register	opcodes_server.c	/^int handle_register(struct opcode_context *ctx) {$/;"	f
id	structs_common.h	/^    char id[MAX_PEER_ID_LEN];$/;"	m	struct:peer
list	opcodes_server.h	/^    struct node *list;$/;"	m	struct:opcode_context	typeref:struct:opcode_context::node
main	client.c	/^int main(int argc, char **argv) {$/;"	f
main	server.c	/^int main(int argc, char **argv) {$/;"	f
message	net.h	/^    char message[MAX_MESSAGE_LEN];$/;"	m	struct:packet_context
net_location	structs_common.h	/^struct net_location {$/;"	s
next	structs_server.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
node	opcodes_server.h	/^    struct node *node;$/;"	m	struct:opcode_context	typeref:struct:opcode_context::node
node	structs_server.h	/^struct node {$/;"	s
opcode	net.h	/^    enum opcode opcode;$/;"	m	struct:packet_context	typeref:enum:packet_context::opcode
opcode	opcodes.h	/^enum opcode {$/;"	g
opcode_actions	opcodes.c	/^int (*opcode_actions[OPCODES_COUNT]) (struct opcode_context *ctx);$/;"	v
opcode_context	opcodes_client.h	/^struct opcode_context  {$/;"	s
opcode_context	opcodes_server.h	/^struct opcode_context {$/;"	s
opcode_status	opcodes.h	/^enum opcode_status {$/;"	g
p_ctx	opcodes_client.h	/^    struct packet_context *p_ctx;$/;"	m	struct:opcode_context	typeref:struct:opcode_context::packet_context
p_ctx	opcodes_server.h	/^    struct packet_context *p_ctx;$/;"	m	struct:opcode_context	typeref:struct:opcode_context::packet_context
packet_context	net.h	/^struct packet_context {$/;"	s
packet_recv	net.c	/^int packet_recv(int socket, struct peer *peer, struct packet_context *p_ctx) {$/;"	f
packet_send	net.c	/^int packet_send(int socket, struct peer *peer, struct packet_context *p_ctx) {$/;"	f
peer	opcodes_server.h	/^    struct peer *peer;$/;"	m	struct:opcode_context	typeref:struct:opcode_context::peer
peer	structs_common.h	/^struct peer {$/;"	s
peer	structs_server.h	/^    struct peer *peer;$/;"	m	struct:node	typeref:struct:node::peer
peer_DURATION	structs_server.h	6;"	d
port	structs_common.h	/^    unsigned short port;$/;"	m	struct:net_location
prepare_ctx	net.c	/^int prepare_ctx(struct packet_context *p_ctx, enum opcode opcode, char *message) {$/;"	f
public_addr	structs_common.h	/^    struct net_location public_addr;$/;"	m	struct:peer	typeref:struct:peer::net_location
register_opcodes	opcodes_client.c	/^void register_opcodes() {$/;"	f
register_opcodes	opcodes_server.c	/^void register_opcodes() {$/;"	f
sockaddr	structs_common.h	/^    struct sockaddr sockaddr;$/;"	m	struct:peer	typeref:struct:peer::sockaddr
status_messages	opcodes.c	/^char* status_messages[] = {$/;"	v
strdup	p2pim.c	/^char* strdup (const char *s) {$/;"	f
time	structs_server.h	/^    unsigned int time;$/;"	m	struct:node
udp_bind	net.c	/^int udp_bind(const char *port, struct addrinfo **conninfo) {$/;"	f
udp_connect	net.c	/^int udp_connect(const char *host, const char *port, struct addrinfo **conninfo) {$/;"	f
udp_recv	net.c	/^int udp_recv(int socket, struct sockaddr *sockaddr, char *packet) {$/;"	f
udp_send	net.c	/^int udp_send(int socket, struct sockaddr *sockaddr, const char *message) {$/;"	f
